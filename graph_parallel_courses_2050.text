class Solution {
    public int minimumTime(int n, int[][] relations, int[] time) {
        List<List<Integer>>list =new ArrayList<>();
        for(int i =0;i<=n;i++){
            list.add(new ArrayList<>());
            
        }
      int  indegree[][] = new int[n+1][3];
        for(int i =0;i<relations.length;i++){
            list.get(relations[i][0]).add(relations[i][1]);
            indegree[relations[i][1]][0]++;
        }
      
        Queue<Integer>q =new LinkedList<>();
        for(int i =1;i<indegree.length;i++){
            if(indegree[i][0] == 0){
                q.add(i);
            }
            indegree[i][1] = time[i-1];
            indegree[i][2] = time[i-1];
        }
        int ans = 0;
        while(!q.isEmpty()){
            int val =q.poll();
            if(indegree[val][2]>ans)ans = indegree[val][2];
            List<Integer>l = list.get(val);
            for(int i=0;i<l.size();i++){
                indegree[l.get(i)][0]--;
                int max = indegree[l.get(i)][1];
                if(max+indegree[val][2]>indegree[l.get(i)][2])indegree[l.get(i)][2] = max+indegree[val][2];
                if(indegree[l.get(i)][0] == 0){
                    q.add(l.get(i));
                }
            }
        }
        return ans;
    }
}