class Solution {
    class Node{
       Node[]child = new Node[2];
    }
    public int findMaximumXOR(int[] nums) {
        Node root = new Node();
        createTrie(nums,root);
        int max = Integer.MIN_VALUE;
        for(int i =0;i<nums.length;i++){
            Node temp = root;
            int val = nums[i];
            int num = 0;
            for(int j = 31;j>=0;j--){
                int bit = (val & (1<<j));
                if(bit == 0){
                    if(temp.child[1]!=null){
                        num = (num |(1<<j));
                        temp = temp.child[1];
                    }
                    else{
                        temp  = temp.child[0];
                    }
                }
                else{
                if(temp.child[0]!=null){
                        num = (num | (1<<j));
                        temp = temp.child[0];
                    }
                    else{
                        temp  = temp.child[1];
                    }
                }
            }
            max = Math.max(num,max);
        }
        return max;
    }
    public void createTrie(int[]nums,Node root){
        for(int i =0;i<nums.length;i++){
            int val = nums[i];
            Node temp = root;
            for(int j  = 31;j>=0;j--){
                int bit = (val & (1<<j));
                if(bit == 0){
                    if(temp.child[0]==null)temp.child[0] = new Node();
                    temp = temp.child[0];
                }
                else{
                    if(temp.child[1]==null)temp.child[1] = new Node();
                    temp = temp.child[1];
                }
            }
        }
    }
}
