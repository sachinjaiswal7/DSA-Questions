class Solution {
    public int leastInterval(char[] tasks, int n) {
        PriorityQueue<Integer>pq = new PriorityQueue<>((a,b)->(b-a));
      
        int []dp = new int[26];
        for(char c : tasks){
            dp[c-'A'] +=1;
        }
        for(int i =0;i<26;i++){
            if(dp[i]>0){
                pq.add(dp[i]);
            }
        }
        int count = 0;
         List<Integer>list = new ArrayList<>();
        while(!pq.isEmpty()){
           
        for(int i =0;i<=n;i++){
            if(!pq.isEmpty()){
                if(pq.peek()!=1){
            list.add(pq.poll()-1);
                }
                else{
                    pq.poll();
                }
            }
            
            count++;
            if(pq.isEmpty()&&list.isEmpty())return count;
          
        }
            for(int i=0 ;i<list.size();i++){
                if(list.get(i)>0){
                    pq.add(list.get(i));
                }
            }
            list.clear();
        }
        return count;
    }
}